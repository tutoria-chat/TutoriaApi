name: Pipeline - Build, Test & Deploy

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.sln'
      - '.github/workflows/pipeline.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.sln'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - prod

env:
  DOTNET_VERSION: '8.0.x'
  AWS_REGION: us-east-2

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore TutoriaApi.sln

    - name: Build solution
      run: dotnet build TutoriaApi.sln --configuration Release --no-restore

    - name: Run unit tests
      run: dotnet test TutoriaApi.sln --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" --results-directory ./TestResults

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: './TestResults/**/*.trx'
        retention-days: 30

    - name: Publish Unified API (Management + Auth)
      run: dotnet publish src/TutoriaApi.Web.API/TutoriaApi.Web.API.csproj --configuration Release --output ./publish --no-build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: ./publish
        retention-days: 7

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'dev')
    environment:
      name: development
      url: ${{ steps.get-url.outputs.url }}

    env:
      EB_APPLICATION_NAME: tutoria-api-dev
      EB_ENVIRONMENT_NAME: tutoria-api-dev-env

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./publish

    - name: Create appsettings.Production.json with secrets
      working-directory: ./publish
      run: |
        cat > appsettings.Production.json << 'EOF'
        {
          "ConnectionStrings": {
            "DefaultConnection": "${{ secrets.DEV_DB_CONNECTION_STRING }}"
          },
          "AiApi": {
            "BaseUrl": "${{ secrets.DEV_AI_API_BASE_URL }}"
          },
          "Jwt": {
            "SecretKey": "${{ secrets.DEV_JWT_SECRET_KEY }}",
            "Issuer": "${{ secrets.DEV_JWT_ISSUER }}",
            "Audience": "${{ secrets.DEV_JWT_AUDIENCE }}"
          },
          "AzureStorage": {
            "ConnectionString": "${{ secrets.DEV_AZURE_STORAGE_CONNECTION_STRING }}",
            "ContainerName": "${{ secrets.DEV_AZURE_STORAGE_CONTAINER }}"
          },
          "OpenAI": {
            "ApiKey": "${{ secrets.DEV_OPENAI_API_KEY }}"
          },
          "AWS": {
            "Region": "${{ secrets.DEV_AWS_SES_REGION }}",
            "AccessKeyId": "${{ secrets.DEV_AWS_SES_ACCESS_KEY_ID }}",
            "SecretAccessKey": "${{ secrets.DEV_AWS_SES_SECRET_ACCESS_KEY }}"
          },
          "Email": {
            "FromAddress": "${{ secrets.DEV_EMAIL_FROM_ADDRESS }}",
            "FromName": "${{ secrets.DEV_EMAIL_FROM_NAME }}",
            "FrontendUrl": "${{ secrets.DEV_EMAIL_FRONTEND_URL }}",
            "LogoUrl": "${{ secrets.DEV_EMAIL_LOGO_URL }}",
            "Enabled": true
          }
        }
        EOF

    - name: Create deployment package
      run: |
        cd publish
        zip -r ../deployment-package.zip .
        cd ..

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate version label
      run: |
        VERSION_LABEL="v-$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
        echo "Generated version label: $VERSION_LABEL"

    - name: Upload to S3
      run: |
        S3_BUCKET="${{ secrets.DEV_EB_S3_BUCKET }}"
        S3_KEY="tutoria-api-dev-$(date +%Y%m%d-%H%M%S).zip"
        aws s3 cp deployment-package.zip s3://$S3_BUCKET/$S3_KEY
        echo "S3_KEY=$S3_KEY" >> $GITHUB_ENV

    - name: Create Elastic Beanstalk application version
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --version-label "${{ env.VERSION_LABEL }}" \
          --source-bundle S3Bucket="${{ secrets.DEV_EB_S3_BUCKET }}",S3Key="${{ env.S3_KEY }}" \
          --description "Deployment from GitHub Actions - Commit ${{ github.sha }}"

    - name: Deploy to Elastic Beanstalk
      run: |
        aws elasticbeanstalk update-environment \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
          --version-label "${{ env.VERSION_LABEL }}"

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for environment to become healthy..."
        aws elasticbeanstalk wait environment-updated \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --environment-name ${{ env.EB_ENVIRONMENT_NAME }}

    - name: Get deployment URL
      id: get-url
      run: |
        CNAME=$(aws elasticbeanstalk describe-environments \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
          --query "Environments[0].CNAME" \
          --output text)
        echo "url=https://$CNAME" >> $GITHUB_OUTPUT
        echo "Deployed to: https://$CNAME"

    - name: Clean up old versions (keep last 10)
      run: |
        aws elasticbeanstalk describe-application-versions \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --query "sort_by(ApplicationVersions, &DateCreated)[:-10].VersionLabel" \
          --output text | tr '\t' '\n' | while read version; do
            if [ ! -z "$version" ]; then
              echo "Deleting old version: $version"
              aws elasticbeanstalk delete-application-version \
                --application-name ${{ env.EB_APPLICATION_NAME }} \
                --version-label "$version" \
                --delete-source-bundle || true
            fi
          done

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'prod'
    environment:
      name: production
      url: ${{ steps.get-url.outputs.url }}

    env:
      EB_APPLICATION_NAME: tutoria-api-prod
      EB_ENVIRONMENT_NAME: tutoria-api-prod-env

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./publish

    - name: Create appsettings.Production.json with secrets
      working-directory: ./publish
      run: |
        cat > appsettings.Production.json << 'EOF'
        {
          "ConnectionStrings": {
            "DefaultConnection": "${{ secrets.PROD_DB_CONNECTION_STRING }}"
          },
          "AiApi": {
            "BaseUrl": "${{ secrets.PROD_AI_API_BASE_URL }}"
          },
          "Jwt": {
            "SecretKey": "${{ secrets.PROD_JWT_SECRET_KEY }}",
            "Issuer": "${{ secrets.PROD_JWT_ISSUER }}",
            "Audience": "${{ secrets.PROD_JWT_AUDIENCE }}"
          },
          "AzureStorage": {
            "ConnectionString": "${{ secrets.PROD_AZURE_STORAGE_CONNECTION_STRING }}",
            "ContainerName": "${{ secrets.PROD_AZURE_STORAGE_CONTAINER }}"
          },
          "OpenAI": {
            "ApiKey": "${{ secrets.PROD_OPENAI_API_KEY }}"
          },
          "AWS": {
            "Region": "${{ secrets.PROD_AWS_SES_REGION }}",
            "AccessKeyId": "${{ secrets.PROD_AWS_SES_ACCESS_KEY_ID }}",
            "SecretAccessKey": "${{ secrets.PROD_AWS_SES_SECRET_ACCESS_KEY }}"
          },
          "Email": {
            "FromAddress": "${{ secrets.PROD_EMAIL_FROM_ADDRESS }}",
            "FromName": "${{ secrets.PROD_EMAIL_FROM_NAME }}",
            "FrontendUrl": "${{ secrets.PROD_EMAIL_FRONTEND_URL }}",
            "LogoUrl": "${{ secrets.PROD_EMAIL_LOGO_URL }}",
            "Enabled": true
          }
        }
        EOF

    - name: Create deployment package
      run: |
        cd publish
        zip -r ../deployment-package.zip .
        cd ..

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate version label
      run: |
        VERSION_LABEL="v-$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
        echo "Generated version label: $VERSION_LABEL"

    - name: Upload to S3
      run: |
        S3_BUCKET="${{ secrets.PROD_EB_S3_BUCKET }}"
        S3_KEY="tutoria-api-prod-$(date +%Y%m%d-%H%M%S).zip"
        aws s3 cp deployment-package.zip s3://$S3_BUCKET/$S3_KEY
        echo "S3_KEY=$S3_KEY" >> $GITHUB_ENV

    - name: Create Elastic Beanstalk application version
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --version-label "${{ env.VERSION_LABEL }}" \
          --source-bundle S3Bucket="${{ secrets.PROD_EB_S3_BUCKET }}",S3Key="${{ env.S3_KEY }}" \
          --description "Production Deployment from GitHub Actions - Commit ${{ github.sha }}"

    - name: Deploy to Elastic Beanstalk
      run: |
        aws elasticbeanstalk update-environment \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
          --version-label "${{ env.VERSION_LABEL }}"

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for environment to become healthy..."
        aws elasticbeanstalk wait environment-updated \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --environment-name ${{ env.EB_ENVIRONMENT_NAME }}

    - name: Get deployment URL
      id: get-url
      run: |
        CNAME=$(aws elasticbeanstalk describe-environments \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
          --query "Environments[0].CNAME" \
          --output text)
        echo "url=https://$CNAME" >> $GITHUB_OUTPUT
        echo "Deployed to: https://$CNAME"

    - name: Clean up old versions (keep last 20)
      run: |
        aws elasticbeanstalk describe-application-versions \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --query "sort_by(ApplicationVersions, &DateCreated)[:-20].VersionLabel" \
          --output text | tr '\t' '\n' | while read version; do
            if [ ! -z "$version" ]; then
              echo "Deleting old version: $version"
              aws elasticbeanstalk delete-application-version \
                --application-name ${{ env.EB_APPLICATION_NAME }} \
                --version-label "$version" \
                --delete-source-bundle || true
            fi
          done

name: Deploy to Elastic Beanstalk (Development)

on:
  push:
    branches:
      - develop
    paths:
      - 'src/**'
      - '.github/workflows/deploy-dev.yml'
  workflow_dispatch: # Allow manual trigger

env:
  AWS_REGION: us-east-1
  EB_APPLICATION_NAME: tutoria-api-dev
  EB_ENVIRONMENT_NAME: tutoria-api-dev-env
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-deploy:
    name: Build and Deploy to AWS Elastic Beanstalk
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore TutoriaApi.sln

    - name: Build solution
      run: dotnet build TutoriaApi.sln --configuration Release --no-restore

    - name: Run tests
      run: dotnet test TutoriaApi.sln --configuration Release --no-build --verbosity minimal

    # TODO: Replace with unified project when we split Management and Auth deployments
    # For now, we deploy Management API only (Auth endpoints would need to be added or deployed separately)
    - name: Publish Management API
      run: dotnet publish src/TutoriaApi.Web.Management/TutoriaApi.Web.Management.csproj --configuration Release --output ./publish --no-build

    - name: Create appsettings.Production.json with secrets
      run: |
        cat > ./publish/appsettings.Production.json << 'EOF'
        {
          "ConnectionStrings": {
            "DefaultConnection": "${{ secrets.DB_CONNECTION_STRING }}"
          },
          "Jwt": {
            "SecretKey": "${{ secrets.JWT_SECRET_KEY }}",
            "Issuer": "${{ secrets.JWT_ISSUER }}",
            "Audience": "${{ secrets.JWT_AUDIENCE }}"
          },
          "AzureStorage": {
            "ConnectionString": "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}",
            "ContainerName": "${{ secrets.AZURE_STORAGE_CONTAINER }}"
          },
          "OpenAI": {
            "ApiKey": "${{ secrets.OPENAI_API_KEY }}"
          },
          "AWS": {
            "Region": "${{ secrets.AWS_SES_REGION }}",
            "AccessKeyId": "${{ secrets.AWS_SES_ACCESS_KEY_ID }}",
            "SecretAccessKey": "${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}"
          },
          "Email": {
            "FromAddress": "${{ secrets.EMAIL_FROM_ADDRESS }}",
            "FromName": "${{ secrets.EMAIL_FROM_NAME }}",
            "FrontendUrl": "${{ secrets.EMAIL_FRONTEND_URL }}",
            "Enabled": true
          }
        }
        EOF

    - name: Create deployment package
      run: |
        cd publish
        zip -r ../deployment-package.zip .
        cd ..

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload to S3
      run: |
        S3_BUCKET="${{ secrets.EB_S3_BUCKET }}"
        S3_KEY="tutoria-api-dev-$(date +%Y%m%d-%H%M%S).zip"
        aws s3 cp deployment-package.zip s3://$S3_BUCKET/$S3_KEY
        echo "S3_KEY=$S3_KEY" >> $GITHUB_ENV

    - name: Create Elastic Beanstalk application version
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --version-label "v-$(date +%Y%m%d-%H%M%S)" \
          --source-bundle S3Bucket="${{ secrets.EB_S3_BUCKET }}",S3Key="${{ env.S3_KEY }}" \
          --description "Deployment from GitHub Actions - Commit ${{ github.sha }}"

    - name: Deploy to Elastic Beanstalk
      run: |
        aws elasticbeanstalk update-environment \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
          --version-label "v-$(date +%Y%m%d-%H%M%S)"

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for environment to become healthy..."
        aws elasticbeanstalk wait environment-updated \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --environment-name ${{ env.EB_ENVIRONMENT_NAME }}

    - name: Get deployment URL
      run: |
        CNAME=$(aws elasticbeanstalk describe-environments \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
          --query "Environments[0].CNAME" \
          --output text)
        echo "üöÄ Deployment successful!"
        echo "üìç API URL: https://$CNAME"
        echo "üè• Health Check: https://$CNAME/health"
        echo "üìö Swagger UI: https://$CNAME/swagger"

    - name: Cleanup old versions (keep last 10)
      run: |
        aws elasticbeanstalk describe-application-versions \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --query "ApplicationVersions | sort_by(@, &DateCreated) | [0:-10].VersionLabel" \
          --output text | xargs -n 1 -I {} \
          aws elasticbeanstalk delete-application-version \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --version-label {} \
            --delete-source-bundle
